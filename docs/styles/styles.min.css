/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Change the default font family in all browsers (opinionated).
 * 2. Prevent adjustments of font size after orientation changes in IE and iOS.
 */
html {
  font: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 * 2. Add the correct display in IE.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary {
  /* 1 */
  display: block; }

/**
 * Add the correct display in IE 9-.
 */
audio,
canvas,
progress,
video {
  display: inline-block; }

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  vertical-align: baseline; }

/**
 * Add the correct display in IE 10-.
 * 1. Add the correct display in IE.
 */
template,
[hidden] {
  display: none; }

/* Links
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */ }

/**
 * Remove the outline on focused links when they are also active or hovered
 * in all browsers (opinionated).
 */
a:active,
a:hover {
  outline-width: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the bottom border in Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */ }

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit; }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000; }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px; }

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/* Forms
   ========================================================================== */
/**
 * 1. Change font properties to `inherit` in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
select,
textarea {
  font: inherit;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Restore the font weight unset by the previous rule.
 */
optgroup {
  font-weight: bold; }

/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0; }

/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText; }

/**
 * Change the border, margin, and padding in all browsers (opinionated).
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */ }

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto; }

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */ }

/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on OS X.
 */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Correct the text style of placeholders in Chrome, Edge, and Safari.
 */
::-webkit-input-placeholder {
  color: inherit;
  opacity: 0.54; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/**
 * Simple function to convert pixel values to ems
 * Usage example:
 *   my-selector: em(16px);
 *
 */
/**
 * Simple function to convert a unitless integer to pixels
 * Usage example:
 *   my-selector: px(16);
 *
 */
/**
 * Simple function to remove the unit of measurement
 * Usage example:
 *   strip-unit(16px);
 *
 * @param  {string}   $value  integer with unit of measurement
 * @return {integer}          integer without any unit of measurement
 */
/**
 * Simple function to convert a number to rems
 * Usage example:
 *   calculateRem(32px);
 *
 * @param  {string}   $value  integer with unit of measurement
 * @return {string}          	integer with unit of measurement
 */
.nav__item {
  display: inline-block;
  vertical-align: middle; }

/* heading */
.heading {
  text-align: center;
  text-transform: capitalize;
  color: #283846;
  padding: 40px 0 0;
  font-size: 21px; }

/* form */
.form {
  display: none;
  text-align: center;
  margin: 0 auto;
  padding: 29px 0;
  color: #283846; }
  .form.--visible {
    display: block; }
  .form__block {
    display: inline-block;
    vertical-align: top;
    margin: 0 25px;
    text-align: left; }
  .form__heading {
    margin: 0 0 10px;
    padding: 0 4px;
    font-size: 13px;
    text-transform: capitalize; }
  .form__p-number {
    display: inline-block;
    vertical-align: bottom;
    width: 16px;
    font-size: 8px;
    line-height: 16px;
    text-align: center;
    margin-right: 7px;
    border-radius: 50%;
    border: 1px solid #283846; }
  .form__field, .form__field--col {
    position: relative;
    padding: 12px 4px;
    box-sizing: border-box; }
    .form__field--col {
      display: inline-block; }
  .form__label {
    display: block;
    text-transform: uppercase;
    font-size: 8px; }
  .form__input, .form__input--small {
    width: 256px;
    margin: 6px 0 0;
    padding: 0 0 0 8px;
    border-radius: 3px;
    border: 1px solid #afb5ba; }
    .form__input--small {
      width: 80px; }

/* img-wrap */
.img-wrap, .img-wrap--round, .nav__img-wrap {
  display: block;
  overflow: hidden; }
  .img-wrap--round {
    border-radius: 50%; }

/* img */
.img, .nav__img {
  display: block;
  width: 100%;
  max-height: 100%; }

/* nav */
.nav {
  padding: 30px 0;
  text-align: center; }
  .nav__item {
    width: 72px;
    height: 50px;
    margin: 0 7px;
    padding: 10px;
    text-align: center;
    font-size: 7px;
    text-decoration: none;
    color: #283846;
    background-color: #f3f4f7;
    border: 2px solid transparent;
    border-radius: 5px; }
    .nav__item:hover {
      border: 2px solid #4cb9dc; }
    .nav__item.--active {
      border: 2px solid #4cb9dc;
      background-color: white; }
  .nav__img-wrap {
    width: 36px;
    margin: 5px auto; }

html, body, ul, h1, h2, h3, h4, p {
  margin: 0;
  padding: 0; }

html {
  font-family: 'Noto Sans', sans-serif;
  font-size: 14px;
  line-height: 1.42; }
  @media (min-width: 48em) {
    html {
      font-size: 15px; } }
  @media (min-width: 64em) {
    html {
      font-size: 16px; } }

ul {
  list-style: none; }

.container {
  border: 40px solid #f3f4f7;
  min-width: 330px; }

.text {
  width: 220px;
  margin: 0 auto;
  padding: 9px 0;
  font-style: italic;
  text-align: center;
  color: #afb5ba;
  font-size: 10px; }

/* tooltip */
.tooltip__link {
  position: absolute;
  top: 33px;
  right: 10px; }
  .tooltip__link:hover + .tooltip__img {
    display: inline; }

.tooltip__img {
  display: none;
  position: absolute;
  bottom: 100%;
  left: 0; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
